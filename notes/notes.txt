                                                REACT

Command:
npm init
npm install -D parcel
npx parcel index.html
npm install react
npm install react-dom 
npx parcel build index.html (building production ready code.)

-- Section 3:
npm run start / npm start
npm run build

Episode-01: Inception
ReactElement (Object)  =>  HTML (Browser Understand);
ReactElement is an object. At the end of the day reactElement becomes HTML that the browser understand.
const parent = React.createElement(“div”, { id: “parent”}, “Hello World”)
const root =  ReactDOM.createRoot(document.getElementById(“header”))
root.render(parent);

if you have package and package-lock.json we can generate node_modules.


Section-3:
//React Element
//React.createElement => React Element -> Object => HTMLElement(render)


//JSX(transpiled before it reaches the JS engine) by Parcel(Babel do this) - is not HTML in JavaScript --XML like syntax
//JSX is a syntax extension for JavaScript that looks similar to HTML
//JSX => Babel transpiled it to React.createElement => React Element -> JS Object => HTMLElement(render)

If you want to give attribute you have to use camel case.
Explore(various attribute)

//React Component
Class based component - OLD way
Functional component - NEW way

//Functional component
const HeadingComponent = () => (
    <div id="container">
        <h1 id="heading">This is a Functional React Component</h1>
    </div>
);


Config driven UI
Do not use default index as a key.

Whenever state variable update, react triggers a reconciliation cycle(re-renders the component).

If no dependency array is passed, useEffect will run after every render.
if the dependency array is empty, useEffect will run only once after the first render
if the dependency array has some values, useEffect will run only when those values change